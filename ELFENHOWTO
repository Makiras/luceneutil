This repository forked Luceneutil. It implements the Lucene searching
benchmark used in the paper "Elfen Scheduling: Fine-Grain Principled
Borrowing from Latency-Critical Workloads using Simultaneous Multithreading".

Beside requirements of the original Luceneutil, you need to install
libpfm library (http://perfmon2.sourceforge.net). This repository records
the number of retired cycles and instructions of each request via Linux
kernel perf interface.

# Usage

[参考](http://wxgg.cc/blogs/2018/03/Elfen%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0.html)

1. Download the wikipedia data
```
python src/python/setup.py -download
```

2. Build the Lucene

可能会遇到一些问题，参考[华为云的安装指南](https://support.huaweicloud.com/prtg-cdh-kunpengbds/kunpengsolrcdh632_02_0008.html)。
最大的问题就是 http://repo1.manven.org 会返回 501，需要改为https

```
cd ../ && git clone https://github.com/apache/lucene.git trunk
"cd trunk; git checkout -b new_branch ceb66d34c0a6f840ec195f6da85e323de5e9a04d
cd ./lucene
ant compile-test
```

3. Build the searching benchmark

请记得更改环境变量
Please set the parameters in "./scripts/elfenSetting.sh" correctly, then execute
"./scripts/setupforelfen.sh"

4. Build the index

Executing "./scripts/createIndex.sh" creates the index at INDEX_DIR. "-docCountLimit"
controls the number of wikipedia documents for indexing.

5. Run the server

Executing "./scripts/runSearchServer.sh" launches the searching server. "-searchThreadCount"
controls the number of worker that handles searching requests.

6. Sending requests

~~Clone or copy this repository to a remote machine, then "cd ./elfenDemo; ./send.sh"~~
Get back to elfen/client/script and run 
```
python sendTasks.py wiki.1M.nostopwords.term.tasks 192.168.1.160 7777 100 1000000 200000 test_100_5 20 s
```

PS:  
use taskset to bind pid with cpu_core
